import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { PassThrough } from "node:stream";
import { createReadableStreamFromReadable } from "@remix-run/node";
import { RemixServer, Outlet, Meta, Links, ScrollRestoration, Scripts } from "@remix-run/react";
import { isbot } from "isbot";
import { renderToPipeableStream } from "react-dom/server";
import { QueryClient, QueryClientProvider, useQuery, useMutation } from "@tanstack/react-query";
import { PersistGate } from "redux-persist/lib/integration/react.js";
import { Provider, useSelector, useDispatch } from "react-redux";
import { createSlice, combineReducers, configureStore } from "@reduxjs/toolkit";
import { persistReducer, persistStore } from "redux-persist";
import storage from "redux-persist/lib/storage/index.js";
import * as React from "react";
import React__default from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import * as RechartsPrimitive from "recharts";
import { BarChart, CartesianGrid, XAxis, Tooltip as Tooltip$1, Bar, LabelList } from "recharts";
import axios from "axios";
const ABORT_DELAY = 5e3;
function handleRequest(request, responseStatusCode, responseHeaders, remixContext, loadContext) {
  return isbot(request.headers.get("user-agent") || "") ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      /* @__PURE__ */ jsx(
        RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);
          responseHeaders.set("Content-Type", "text/html");
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          );
          pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500;
          if (shellRendered) {
            console.error(error);
          }
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      /* @__PURE__ */ jsx(
        RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);
          responseHeaders.set("Content-Type", "text/html");
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          );
          pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500;
          if (shellRendered) {
            console.error(error);
          }
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
const entryServer = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: handleRequest
}, Symbol.toStringTag, { value: "Module" }));
const initialState = [{
  label: "January",
  revenue: 0,
  referralPayout: 0
}];
const estimateRevenueSlice = createSlice({
  name: "estimateRevenue",
  initialState,
  reducers: {
    setEstimateRevenue: (state, action) => {
      return action.payload;
    }
  }
});
const { setEstimateRevenue } = estimateRevenueSlice.actions;
const estimateRevenueSlice$1 = estimateRevenueSlice.reducer;
const createNoopStorage = () => {
  return {
    getItem: () => Promise.resolve(null),
    setItem: () => Promise.resolve(),
    removeItem: () => Promise.resolve()
  };
};
const storageEngine = typeof window !== "undefined" ? storage : createNoopStorage();
const rootReducer = combineReducers({
  estimateRevenue: estimateRevenueSlice$1
});
const persistConfig = {
  key: "root",
  storage: storageEngine,
  whitelist: ["estimateRevenue"]
};
const persistedReducer = persistReducer(persistConfig, rootReducer);
const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) => getDefaultMiddleware()
});
const persistor = persistStore(store);
const queryClient = new QueryClient({});
function Layout({ children }) {
  return /* @__PURE__ */ jsxs("html", { lang: "en", children: [
    /* @__PURE__ */ jsxs("head", { children: [
      /* @__PURE__ */ jsx("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ jsx("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }),
      /* @__PURE__ */ jsx(Meta, {}),
      /* @__PURE__ */ jsx(Links, {})
    ] }),
    /* @__PURE__ */ jsxs("body", { className: " font-sans", children: [
      /* @__PURE__ */ jsx(Provider, { store, children: /* @__PURE__ */ jsx(PersistGate, { loading: null, persistor, children: /* @__PURE__ */ jsx(QueryClientProvider, { client: queryClient, children }) }) }),
      /* @__PURE__ */ jsx(ScrollRestoration, {}),
      /* @__PURE__ */ jsx(Scripts, {})
    ] })
  ] });
}
function App() {
  return /* @__PURE__ */ jsx(Outlet, {});
}
const route0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Layout,
  default: App,
  queryClient
}, Symbol.toStringTag, { value: "Module" }));
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
const Slider = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsxs(
  SliderPrimitive.Root,
  {
    ref,
    className: cn(
      "relative flex w-full touch-none select-none items-center",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ jsx(SliderPrimitive.Track, { className: "relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary/20", children: /* @__PURE__ */ jsx(SliderPrimitive.Range, { className: "absolute h-full bg-secondary " }) }),
      /* @__PURE__ */ jsx(SliderPrimitive.Thumb, { className: "block h-4 w-4 rounded-full    bg-gray-800 shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 " })
    ]
  }
));
Slider.displayName = SliderPrimitive.Root.displayName;
const TooltipProvider = TooltipPrimitive.Provider;
const Tooltip = TooltipPrimitive.Root;
const TooltipTrigger = TooltipPrimitive.Trigger;
const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ jsx(
  TooltipPrimitive.Content,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 overflow-hidden rounded-md bg-neutral-900 px-3 py-1.5 text-xs text-neutral-50 animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:bg-neutral-50 dark:text-neutral-900",
      className
    ),
    ...props
  }
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;
const ToolTip = ({ width, height, fill }) => {
  return /* @__PURE__ */ jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", "xmlns:xlink": "http://www.w3.org/1999/xlink", width, zoomAndPan: "magnify", viewBox: "0 0 375 374.999991", height, preserveAspectRatio: "xMidYMid meet", version: "1.0", children: [
    /* @__PURE__ */ jsx("defs", { children: /* @__PURE__ */ jsx("clipPath", { id: "0fd56d0c4d", children: /* @__PURE__ */ jsx("path", { d: "M 9.761719 9.761719 L 365.261719 9.761719 L 365.261719 365.261719 L 9.761719 365.261719 Z M 9.761719 9.761719 ", "clip-rule": "nonzero" }) }) }),
    /* @__PURE__ */ jsx("g", { "clip-path": "url(#0fd56d0c4d)", children: /* @__PURE__ */ jsx("path", { fill, d: "M 187.511719 365.261719 C 184.601562 365.261719 181.695312 365.1875 178.789062 365.046875 C 175.882812 364.902344 172.984375 364.691406 170.085938 364.40625 C 167.191406 364.121094 164.304688 363.761719 161.429688 363.335938 C 158.550781 362.910156 155.6875 362.414062 152.832031 361.84375 C 149.980469 361.277344 147.140625 360.640625 144.320312 359.933594 C 141.5 359.226562 138.695312 358.449219 135.914062 357.605469 C 133.128906 356.761719 130.367188 355.851562 127.628906 354.871094 C 124.890625 353.890625 122.175781 352.84375 119.488281 351.730469 C 116.800781 350.617188 114.140625 349.4375 111.511719 348.195312 C 108.882812 346.949219 106.285156 345.644531 103.71875 344.273438 C 101.152344 342.902344 98.625 341.46875 96.128906 339.972656 C 93.632812 338.476562 91.175781 336.921875 88.757812 335.304688 C 86.339844 333.6875 83.960938 332.011719 81.625 330.28125 C 79.289062 328.546875 76.996094 326.757812 74.746094 324.914062 C 72.5 323.066406 70.296875 321.167969 68.140625 319.214844 C 65.984375 317.261719 63.878906 315.253906 61.820312 313.199219 C 59.765625 311.140625 57.761719 309.035156 55.804688 306.878906 C 53.851562 304.722656 51.953125 302.523438 50.109375 300.273438 C 48.261719 298.023438 46.472656 295.730469 44.738281 293.394531 C 43.007812 291.058594 41.332031 288.679688 39.714844 286.261719 C 38.101562 283.84375 36.542969 281.386719 35.050781 278.890625 C 33.554688 276.398438 32.121094 273.867188 30.75 271.300781 C 29.378906 268.734375 28.070312 266.136719 26.824219 263.507812 C 25.582031 260.878906 24.402344 258.21875 23.289062 255.53125 C 22.175781 252.84375 21.128906 250.132812 20.152344 247.390625 C 19.171875 244.652344 18.257812 241.890625 17.414062 239.109375 C 16.570312 236.324219 15.792969 233.523438 15.085938 230.699219 C 14.378906 227.878906 13.742188 225.039062 13.175781 222.1875 C 12.609375 219.335938 12.109375 216.46875 11.683594 213.589844 C 11.257812 210.714844 10.902344 207.828125 10.617188 204.933594 C 10.332031 202.039062 10.117188 199.136719 9.972656 196.230469 C 9.832031 193.328125 9.761719 190.417969 9.761719 187.511719 C 9.761719 184.601562 9.832031 181.695312 9.972656 178.789062 C 10.117188 175.882812 10.332031 172.984375 10.617188 170.085938 C 10.902344 167.191406 11.257812 164.304688 11.683594 161.429688 C 12.109375 158.550781 12.609375 155.6875 13.175781 152.832031 C 13.742188 149.980469 14.378906 147.140625 15.085938 144.320312 C 15.792969 141.5 16.570312 138.695312 17.414062 135.914062 C 18.257812 133.128906 19.171875 130.367188 20.152344 127.628906 C 21.128906 124.890625 22.175781 122.175781 23.289062 119.488281 C 24.402344 116.800781 25.582031 114.140625 26.824219 111.511719 C 28.070312 108.882812 29.378906 106.285156 30.75 103.71875 C 32.121094 101.152344 33.554688 98.625 35.050781 96.128906 C 36.542969 93.632812 38.101562 91.175781 39.714844 88.757812 C 41.332031 86.339844 43.007812 83.960938 44.738281 81.625 C 46.472656 79.289062 48.261719 76.996094 50.109375 74.746094 C 51.953125 72.5 53.851562 70.296875 55.804688 68.140625 C 57.761719 65.984375 59.765625 63.878906 61.820312 61.820312 C 63.878906 59.765625 65.984375 57.761719 68.140625 55.804688 C 70.296875 53.851562 72.5 51.953125 74.746094 50.109375 C 76.996094 48.261719 79.289062 46.472656 81.625 44.738281 C 83.960938 43.007812 86.339844 41.332031 88.757812 39.714844 C 91.175781 38.101562 93.632812 36.542969 96.128906 35.050781 C 98.625 33.554688 101.152344 32.121094 103.71875 30.75 C 106.285156 29.378906 108.882812 28.070312 111.511719 26.824219 C 114.140625 25.582031 116.800781 24.402344 119.488281 23.289062 C 122.175781 22.175781 124.890625 21.128906 127.628906 20.152344 C 130.367188 19.171875 133.128906 18.257812 135.914062 17.414062 C 138.695312 16.570312 141.5 15.792969 144.320312 15.085938 C 147.140625 14.378906 149.980469 13.742188 152.832031 13.175781 C 155.6875 12.609375 158.550781 12.109375 161.429688 11.683594 C 164.304688 11.257812 167.191406 10.902344 170.085938 10.617188 C 172.984375 10.332031 175.882812 10.117188 178.789062 9.972656 C 181.695312 9.832031 184.601562 9.761719 187.511719 9.761719 C 190.417969 9.761719 193.328125 9.832031 196.230469 9.972656 C 199.136719 10.117188 202.039062 10.332031 204.933594 10.617188 C 207.828125 10.902344 210.714844 11.257812 213.589844 11.683594 C 216.46875 12.109375 219.335938 12.609375 222.1875 13.175781 C 225.039062 13.742188 227.878906 14.378906 230.699219 15.085938 C 233.523438 15.792969 236.324219 16.570312 239.109375 17.414062 C 241.890625 18.257812 244.652344 19.171875 247.390625 20.152344 C 250.132812 21.128906 252.84375 22.175781 255.53125 23.289062 C 258.21875 24.402344 260.878906 25.582031 263.507812 26.824219 C 266.136719 28.070312 268.734375 29.378906 271.300781 30.75 C 273.867188 32.121094 276.398438 33.554688 278.890625 35.050781 C 281.386719 36.542969 283.84375 38.101562 286.261719 39.714844 C 288.679688 41.332031 291.058594 43.007812 293.394531 44.738281 C 295.730469 46.472656 298.023438 48.261719 300.273438 50.109375 C 302.523438 51.953125 304.722656 53.851562 306.878906 55.804688 C 309.035156 57.761719 311.140625 59.765625 313.199219 61.820312 C 315.253906 63.878906 317.261719 65.984375 319.214844 68.140625 C 321.167969 70.296875 323.066406 72.5 324.914062 74.746094 C 326.757812 76.996094 328.546875 79.289062 330.28125 81.625 C 332.011719 83.960938 333.6875 86.339844 335.304688 88.757812 C 336.921875 91.175781 338.476562 93.632812 339.972656 96.128906 C 341.46875 98.625 342.902344 101.152344 344.273438 103.71875 C 345.644531 106.285156 346.949219 108.882812 348.195312 111.511719 C 349.4375 114.140625 350.617188 116.800781 351.730469 119.488281 C 352.84375 122.175781 353.890625 124.890625 354.871094 127.628906 C 355.851562 130.367188 356.761719 133.128906 357.605469 135.914062 C 358.449219 138.695312 359.226562 141.5 359.933594 144.320312 C 360.640625 147.140625 361.277344 149.980469 361.84375 152.832031 C 362.414062 155.6875 362.910156 158.550781 363.335938 161.429688 C 363.761719 164.304688 364.121094 167.191406 364.40625 170.085938 C 364.691406 172.984375 364.902344 175.882812 365.046875 178.789062 C 365.1875 181.695312 365.261719 184.601562 365.261719 187.511719 C 365.261719 190.417969 365.1875 193.328125 365.046875 196.230469 C 364.902344 199.136719 364.691406 202.039062 364.40625 204.933594 C 364.121094 207.828125 363.761719 210.714844 363.335938 213.589844 C 362.910156 216.46875 362.414062 219.335938 361.84375 222.1875 C 361.277344 225.039062 360.640625 227.878906 359.933594 230.699219 C 359.226562 233.523438 358.449219 236.324219 357.605469 239.109375 C 356.761719 241.890625 355.851562 244.652344 354.871094 247.390625 C 353.890625 250.132812 352.84375 252.84375 351.730469 255.53125 C 350.617188 258.21875 349.4375 260.878906 348.195312 263.507812 C 346.949219 266.136719 345.644531 268.734375 344.273438 271.300781 C 342.902344 273.867188 341.46875 276.398438 339.972656 278.890625 C 338.476562 281.386719 336.921875 283.84375 335.304688 286.261719 C 333.6875 288.679688 332.011719 291.058594 330.28125 293.394531 C 328.546875 295.730469 326.757812 298.023438 324.914062 300.273438 C 323.066406 302.523438 321.167969 304.722656 319.214844 306.878906 C 317.261719 309.035156 315.253906 311.140625 313.199219 313.199219 C 311.140625 315.253906 309.035156 317.261719 306.878906 319.214844 C 304.722656 321.167969 302.523438 323.066406 300.273438 324.914062 C 298.023438 326.757812 295.730469 328.546875 293.394531 330.28125 C 291.058594 332.011719 288.679688 333.6875 286.261719 335.304688 C 283.84375 336.921875 281.386719 338.476562 278.890625 339.972656 C 276.398438 341.46875 273.867188 342.902344 271.300781 344.273438 C 268.734375 345.644531 266.136719 346.949219 263.507812 348.195312 C 260.878906 349.4375 258.21875 350.617188 255.53125 351.730469 C 252.84375 352.84375 250.132812 353.890625 247.390625 354.871094 C 244.652344 355.851562 241.890625 356.761719 239.109375 357.605469 C 236.324219 358.449219 233.523438 359.226562 230.699219 359.933594 C 227.878906 360.640625 225.039062 361.277344 222.1875 361.84375 C 219.335938 362.414062 216.46875 362.910156 213.589844 363.335938 C 210.714844 363.761719 207.828125 364.121094 204.933594 364.40625 C 202.039062 364.691406 199.136719 364.902344 196.230469 365.046875 C 193.328125 365.1875 190.417969 365.261719 187.511719 365.261719 Z M 187.511719 45.308594 C 185.183594 45.308594 182.855469 45.367188 180.53125 45.480469 C 178.207031 45.597656 175.886719 45.765625 173.570312 45.996094 C 171.257812 46.222656 168.945312 46.507812 166.644531 46.847656 C 164.34375 47.191406 162.050781 47.589844 159.769531 48.042969 C 157.484375 48.496094 155.214844 49.007812 152.957031 49.570312 C 150.699219 50.136719 148.457031 50.757812 146.230469 51.433594 C 144.003906 52.109375 141.796875 52.839844 139.605469 53.621094 C 137.414062 54.40625 135.242188 55.242188 133.09375 56.132812 C 130.941406 57.023438 128.816406 57.96875 126.710938 58.964844 C 124.609375 59.957031 122.53125 61.003906 120.476562 62.101562 C 118.425781 63.199219 116.402344 64.34375 114.40625 65.542969 C 112.410156 66.738281 110.441406 67.980469 108.507812 69.273438 C 106.574219 70.566406 104.671875 71.90625 102.800781 73.292969 C 100.933594 74.679688 99.097656 76.113281 97.300781 77.589844 C 95.5 79.066406 93.738281 80.585938 92.015625 82.148438 C 90.289062 83.710938 88.605469 85.3125 86.960938 86.960938 C 85.3125 88.605469 83.710938 90.289062 82.148438 92.015625 C 80.585938 93.738281 79.066406 95.5 77.589844 97.300781 C 76.113281 99.097656 74.679688 100.933594 73.292969 102.800781 C 71.90625 104.671875 70.566406 106.574219 69.273438 108.507812 C 67.980469 110.441406 66.738281 112.410156 65.542969 114.40625 C 64.34375 116.402344 63.199219 118.425781 62.101562 120.476562 C 61.003906 122.53125 59.957031 124.609375 58.964844 126.710938 C 57.96875 128.816406 57.023438 130.941406 56.132812 133.09375 C 55.242188 135.242188 54.40625 137.414062 53.621094 139.605469 C 52.839844 141.796875 52.109375 144.003906 51.433594 146.230469 C 50.757812 148.457031 50.136719 150.699219 49.570312 152.957031 C 49.007812 155.214844 48.496094 157.484375 48.042969 159.769531 C 47.589844 162.050781 47.191406 164.34375 46.847656 166.644531 C 46.507812 168.945312 46.222656 171.257812 45.996094 173.570312 C 45.765625 175.886719 45.597656 178.207031 45.480469 180.53125 C 45.367188 182.855469 45.308594 185.183594 45.308594 187.511719 C 45.308594 189.835938 45.367188 192.164062 45.480469 194.488281 C 45.597656 196.8125 45.765625 199.132812 45.996094 201.449219 C 46.222656 203.765625 46.507812 206.074219 46.847656 208.375 C 47.191406 210.675781 47.589844 212.96875 48.042969 215.253906 C 48.496094 217.535156 49.007812 219.804688 49.570312 222.0625 C 50.136719 224.320312 50.757812 226.5625 51.433594 228.789062 C 52.109375 231.015625 52.839844 233.226562 53.621094 235.414062 C 54.40625 237.605469 55.242188 239.777344 56.132812 241.929688 C 57.023438 244.078125 57.96875 246.203125 58.964844 248.308594 C 59.957031 250.414062 61.003906 252.492188 62.101562 254.542969 C 63.199219 256.59375 64.34375 258.621094 65.542969 260.617188 C 66.738281 262.613281 67.980469 264.578125 69.273438 266.511719 C 70.566406 268.449219 71.90625 270.347656 73.292969 272.21875 C 74.679688 274.085938 76.113281 275.921875 77.589844 277.722656 C 79.066406 279.519531 80.585938 281.28125 82.148438 283.007812 C 83.710938 284.730469 85.3125 286.414062 86.960938 288.0625 C 88.605469 289.707031 90.289062 291.3125 92.015625 292.875 C 93.738281 294.4375 95.5 295.957031 97.300781 297.433594 C 99.097656 298.910156 100.933594 300.339844 102.800781 301.726562 C 104.671875 303.113281 106.574219 304.453125 108.507812 305.746094 C 110.441406 307.039062 112.410156 308.28125 114.40625 309.480469 C 116.402344 310.675781 118.425781 311.824219 120.476562 312.917969 C 122.53125 314.015625 124.609375 315.0625 126.710938 316.058594 C 128.816406 317.050781 130.941406 317.996094 133.09375 318.886719 C 135.242188 319.777344 137.414062 320.613281 139.605469 321.398438 C 141.796875 322.183594 144.003906 322.910156 146.230469 323.585938 C 148.457031 324.261719 150.699219 324.882812 152.957031 325.449219 C 155.214844 326.015625 157.484375 326.523438 159.769531 326.976562 C 162.050781 327.433594 164.34375 327.828125 166.644531 328.171875 C 168.945312 328.511719 171.257812 328.796875 173.570312 329.027344 C 175.886719 329.253906 178.207031 329.425781 180.53125 329.539062 C 182.855469 329.652344 185.183594 329.710938 187.511719 329.710938 C 189.835938 329.710938 192.164062 329.652344 194.488281 329.539062 C 196.8125 329.425781 199.132812 329.253906 201.449219 329.027344 C 203.765625 328.796875 206.074219 328.511719 208.375 328.171875 C 210.675781 327.828125 212.96875 327.433594 215.253906 326.976562 C 217.535156 326.523438 219.804688 326.015625 222.0625 325.449219 C 224.320312 324.882812 226.5625 324.261719 228.789062 323.585938 C 231.015625 322.910156 233.226562 322.183594 235.414062 321.398438 C 237.605469 320.613281 239.777344 319.777344 241.929688 318.886719 C 244.078125 317.996094 246.203125 317.050781 248.308594 316.058594 C 250.414062 315.0625 252.492188 314.015625 254.542969 312.917969 C 256.59375 311.824219 258.621094 310.675781 260.617188 309.480469 C 262.613281 308.28125 264.578125 307.039062 266.511719 305.746094 C 268.449219 304.453125 270.347656 303.113281 272.21875 301.726562 C 274.085938 300.339844 275.921875 298.910156 277.722656 297.433594 C 279.519531 295.957031 281.28125 294.4375 283.007812 292.875 C 284.730469 291.3125 286.414062 289.707031 288.0625 288.0625 C 289.707031 286.414062 291.3125 284.730469 292.875 283.007812 C 294.4375 281.28125 295.957031 279.519531 297.433594 277.722656 C 298.910156 275.921875 300.339844 274.085938 301.726562 272.21875 C 303.113281 270.347656 304.453125 268.449219 305.746094 266.511719 C 307.039062 264.578125 308.28125 262.613281 309.480469 260.617188 C 310.675781 258.621094 311.824219 256.59375 312.917969 254.542969 C 314.015625 252.492188 315.0625 250.414062 316.058594 248.308594 C 317.050781 246.203125 317.996094 244.078125 318.886719 241.929688 C 319.777344 239.777344 320.613281 237.605469 321.398438 235.414062 C 322.183594 233.226562 322.910156 231.015625 323.585938 228.789062 C 324.261719 226.5625 324.882812 224.320312 325.449219 222.0625 C 326.015625 219.804688 326.523438 217.535156 326.976562 215.253906 C 327.433594 212.96875 327.828125 210.675781 328.171875 208.375 C 328.511719 206.074219 328.796875 203.765625 329.027344 201.449219 C 329.253906 199.132812 329.425781 196.8125 329.539062 194.488281 C 329.652344 192.164062 329.710938 189.835938 329.710938 187.511719 C 329.710938 185.183594 329.652344 182.855469 329.539062 180.53125 C 329.425781 178.207031 329.253906 175.886719 329.027344 173.570312 C 328.796875 171.257812 328.511719 168.945312 328.171875 166.644531 C 327.828125 164.34375 327.433594 162.050781 326.976562 159.769531 C 326.523438 157.484375 326.015625 155.214844 325.449219 152.957031 C 324.882812 150.699219 324.261719 148.457031 323.585938 146.230469 C 322.910156 144.003906 322.183594 141.796875 321.398438 139.605469 C 320.613281 137.414062 319.777344 135.242188 318.886719 133.09375 C 317.996094 130.941406 317.050781 128.816406 316.058594 126.710938 C 315.0625 124.609375 314.015625 122.53125 312.917969 120.476562 C 311.824219 118.425781 310.675781 116.402344 309.480469 114.40625 C 308.28125 112.410156 307.039062 110.441406 305.746094 108.507812 C 304.453125 106.574219 303.113281 104.671875 301.726562 102.800781 C 300.339844 100.933594 298.910156 99.097656 297.433594 97.300781 C 295.957031 95.5 294.4375 93.738281 292.875 92.015625 C 291.3125 90.289062 289.707031 88.605469 288.0625 86.960938 C 286.414062 85.3125 284.730469 83.710938 283.007812 82.148438 C 281.28125 80.585938 279.519531 79.066406 277.722656 77.589844 C 275.921875 76.113281 274.085938 74.679688 272.21875 73.292969 C 270.347656 71.90625 268.449219 70.566406 266.511719 69.273438 C 264.578125 67.980469 262.613281 66.738281 260.617188 65.542969 C 258.621094 64.34375 256.59375 63.199219 254.542969 62.101562 C 252.492188 61.003906 250.414062 59.957031 248.308594 58.964844 C 246.203125 57.96875 244.078125 57.023438 241.929688 56.132812 C 239.777344 55.242188 237.605469 54.40625 235.414062 53.621094 C 233.226562 52.839844 231.015625 52.109375 228.789062 51.433594 C 226.5625 50.757812 224.320312 50.136719 222.0625 49.570312 C 219.804688 49.007812 217.535156 48.496094 215.253906 48.042969 C 212.96875 47.589844 210.675781 47.191406 208.375 46.847656 C 206.074219 46.507812 203.765625 46.222656 201.449219 45.996094 C 199.132812 45.765625 196.8125 45.597656 194.488281 45.480469 C 192.164062 45.367188 189.835938 45.308594 187.511719 45.308594 Z M 187.511719 45.308594 ", "fill-opacity": "1", "fill-rule": "nonzero" }) }),
    /* @__PURE__ */ jsx("path", { fill: "#000000", d: "M 223.058594 294.160156 L 205.285156 294.160156 C 204.121094 294.160156 202.960938 294.101562 201.800781 293.988281 C 200.640625 293.875 199.492188 293.703125 198.351562 293.476562 C 197.207031 293.25 196.078125 292.96875 194.964844 292.628906 C 193.851562 292.292969 192.757812 291.898438 191.679688 291.453125 C 190.605469 291.007812 189.554688 290.511719 188.527344 289.960938 C 187.5 289.414062 186.503906 288.816406 185.535156 288.167969 C 184.566406 287.523438 183.632812 286.828125 182.734375 286.089844 C 181.832031 285.351562 180.972656 284.570312 180.148438 283.746094 C 179.324219 282.925781 178.542969 282.0625 177.804688 281.164062 C 177.066406 280.261719 176.375 279.328125 175.726562 278.359375 C 175.078125 277.394531 174.480469 276.394531 173.933594 275.367188 C 173.382812 274.339844 172.886719 273.289062 172.441406 272.214844 C 171.996094 271.140625 171.605469 270.042969 171.265625 268.929688 C 170.929688 267.816406 170.644531 266.6875 170.417969 265.546875 C 170.191406 264.402344 170.019531 263.253906 169.90625 262.09375 C 169.792969 260.9375 169.734375 259.773438 169.734375 258.609375 L 169.734375 187.511719 C 169.152344 187.511719 168.574219 187.480469 167.992188 187.425781 C 167.414062 187.367188 166.839844 187.28125 166.265625 187.167969 C 165.695312 187.054688 165.132812 186.914062 164.574219 186.746094 C 164.019531 186.574219 163.472656 186.378906 162.933594 186.15625 C 162.394531 185.933594 161.871094 185.6875 161.355469 185.410156 C 160.84375 185.136719 160.34375 184.839844 159.859375 184.515625 C 159.375 184.191406 158.910156 183.84375 158.457031 183.476562 C 158.007812 183.105469 157.578125 182.714844 157.167969 182.304688 C 156.753906 181.890625 156.363281 181.460938 155.996094 181.011719 C 155.625 180.5625 155.28125 180.09375 154.957031 179.609375 C 154.632812 179.125 154.332031 178.628906 154.058594 178.113281 C 153.785156 177.601562 153.535156 177.074219 153.3125 176.539062 C 153.089844 176 152.894531 175.453125 152.726562 174.894531 C 152.558594 174.339844 152.414062 173.773438 152.300781 173.203125 C 152.1875 172.632812 152.101562 172.058594 152.046875 171.476562 C 151.988281 170.898438 151.960938 170.316406 151.960938 169.734375 C 151.960938 169.152344 151.988281 168.574219 152.046875 167.992188 C 152.101562 167.414062 152.1875 166.839844 152.300781 166.265625 C 152.414062 165.695312 152.558594 165.132812 152.726562 164.574219 C 152.894531 164.019531 153.089844 163.472656 153.3125 162.933594 C 153.535156 162.394531 153.785156 161.871094 154.058594 161.355469 C 154.332031 160.84375 154.632812 160.34375 154.957031 159.859375 C 155.28125 159.375 155.625 158.910156 155.996094 158.457031 C 156.363281 158.007812 156.753906 157.578125 157.167969 157.167969 C 157.578125 156.753906 158.007812 156.363281 158.457031 155.996094 C 158.910156 155.625 159.375 155.28125 159.859375 154.957031 C 160.34375 154.632812 160.84375 154.332031 161.355469 154.058594 C 161.871094 153.785156 162.394531 153.535156 162.933594 153.3125 C 163.472656 153.089844 164.019531 152.894531 164.574219 152.726562 C 165.132812 152.558594 165.695312 152.414062 166.265625 152.300781 C 166.839844 152.1875 167.414062 152.101562 167.992188 152.046875 C 168.574219 151.988281 169.152344 151.960938 169.734375 151.960938 L 187.511719 151.960938 C 188.09375 151.960938 188.671875 151.988281 189.253906 152.046875 C 189.832031 152.101562 190.40625 152.1875 190.976562 152.300781 C 191.550781 152.414062 192.113281 152.558594 192.671875 152.726562 C 193.226562 152.894531 193.773438 153.089844 194.3125 153.3125 C 194.851562 153.535156 195.375 153.785156 195.890625 154.058594 C 196.402344 154.332031 196.902344 154.632812 197.386719 154.957031 C 197.871094 155.28125 198.335938 155.625 198.785156 155.996094 C 199.238281 156.363281 199.667969 156.753906 200.078125 157.167969 C 200.492188 157.578125 200.882812 158.007812 201.25 158.457031 C 201.621094 158.910156 201.964844 159.375 202.289062 159.859375 C 202.613281 160.34375 202.910156 160.84375 203.1875 161.355469 C 203.460938 161.871094 203.710938 162.394531 203.933594 162.933594 C 204.15625 163.472656 204.351562 164.019531 204.519531 164.574219 C 204.6875 165.132812 204.832031 165.695312 204.945312 166.265625 C 205.058594 166.839844 205.144531 167.414062 205.199219 167.992188 C 205.257812 168.574219 205.285156 169.152344 205.285156 169.734375 L 205.285156 258.609375 L 223.058594 258.609375 C 223.640625 258.609375 224.222656 258.640625 224.800781 258.695312 C 225.382812 258.753906 225.957031 258.839844 226.527344 258.953125 C 227.097656 259.066406 227.664062 259.207031 228.21875 259.375 C 228.777344 259.542969 229.324219 259.742188 229.863281 259.964844 C 230.398438 260.1875 230.925781 260.433594 231.4375 260.710938 C 231.953125 260.984375 232.453125 261.28125 232.933594 261.605469 C 233.417969 261.929688 233.886719 262.277344 234.335938 262.644531 C 234.785156 263.015625 235.21875 263.40625 235.628906 263.816406 C 236.039062 264.226562 236.429688 264.660156 236.800781 265.109375 C 237.167969 265.558594 237.515625 266.027344 237.839844 266.511719 C 238.164062 266.992188 238.460938 267.492188 238.738281 268.007812 C 239.011719 268.519531 239.257812 269.046875 239.480469 269.582031 C 239.703125 270.121094 239.902344 270.667969 240.070312 271.226562 C 240.238281 271.78125 240.378906 272.347656 240.492188 272.917969 C 240.605469 273.488281 240.691406 274.0625 240.75 274.644531 C 240.808594 275.222656 240.835938 275.804688 240.835938 276.386719 C 240.835938 276.96875 240.808594 277.546875 240.75 278.128906 C 240.691406 278.707031 240.605469 279.28125 240.492188 279.851562 C 240.378906 280.425781 240.238281 280.988281 240.070312 281.546875 C 239.902344 282.101562 239.703125 282.648438 239.480469 283.1875 C 239.257812 283.726562 239.011719 284.25 238.738281 284.765625 C 238.460938 285.277344 238.164062 285.777344 237.839844 286.261719 C 237.515625 286.746094 237.167969 287.210938 236.800781 287.660156 C 236.429688 288.113281 236.039062 288.542969 235.628906 288.953125 C 235.21875 289.367188 234.785156 289.757812 234.335938 290.125 C 233.886719 290.496094 233.417969 290.839844 232.933594 291.164062 C 232.453125 291.488281 231.953125 291.785156 231.4375 292.0625 C 230.925781 292.335938 230.398438 292.585938 229.863281 292.808594 C 229.324219 293.03125 228.777344 293.226562 228.21875 293.394531 C 227.664062 293.5625 227.097656 293.707031 226.527344 293.820312 C 225.957031 293.933594 225.382812 294.019531 224.800781 294.074219 C 224.222656 294.132812 223.640625 294.160156 223.058594 294.160156 Z M 223.058594 294.160156 ", "fill-opacity": "1", "fill-rule": "nonzero" }),
    /* @__PURE__ */ jsx("path", { fill: "#000000", d: "M 205.285156 107.523438 C 205.285156 108.394531 205.242188 109.265625 205.15625 110.136719 C 205.070312 111.003906 204.941406 111.867188 204.773438 112.722656 C 204.601562 113.582031 204.390625 114.425781 204.136719 115.261719 C 203.882812 116.097656 203.589844 116.917969 203.253906 117.726562 C 202.921875 118.53125 202.546875 119.320312 202.136719 120.089844 C 201.726562 120.863281 201.277344 121.609375 200.792969 122.335938 C 200.308594 123.0625 199.785156 123.761719 199.234375 124.4375 C 198.679688 125.113281 198.09375 125.757812 197.476562 126.375 C 196.859375 126.992188 196.210938 127.578125 195.539062 128.132812 C 194.863281 128.6875 194.160156 129.207031 193.4375 129.691406 C 192.710938 130.175781 191.960938 130.625 191.191406 131.035156 C 190.421875 131.449219 189.632812 131.820312 188.824219 132.15625 C 188.019531 132.488281 187.199219 132.785156 186.363281 133.039062 C 185.527344 133.289062 184.679688 133.503906 183.824219 133.671875 C 182.96875 133.84375 182.105469 133.972656 181.234375 134.058594 C 180.367188 134.140625 179.496094 134.183594 178.621094 134.183594 C 177.75 134.183594 176.878906 134.140625 176.007812 134.058594 C 175.140625 133.972656 174.277344 133.84375 173.421875 133.671875 C 172.566406 133.503906 171.71875 133.289062 170.882812 133.039062 C 170.046875 132.785156 169.226562 132.488281 168.417969 132.15625 C 167.613281 131.820312 166.824219 131.449219 166.054688 131.035156 C 165.285156 130.625 164.535156 130.175781 163.808594 129.691406 C 163.082031 129.207031 162.382812 128.6875 161.707031 128.132812 C 161.035156 127.578125 160.386719 126.992188 159.769531 126.375 C 159.152344 125.757812 158.566406 125.113281 158.011719 124.4375 C 157.457031 123.761719 156.9375 123.0625 156.453125 122.335938 C 155.96875 121.609375 155.519531 120.863281 155.109375 120.089844 C 154.695312 119.320312 154.324219 118.53125 153.988281 117.726562 C 153.65625 116.917969 153.363281 116.097656 153.109375 115.261719 C 152.855469 114.425781 152.644531 113.582031 152.472656 112.722656 C 152.300781 111.867188 152.175781 111.003906 152.089844 110.136719 C 152.003906 109.265625 151.960938 108.394531 151.960938 107.523438 C 151.960938 106.648438 152.003906 105.777344 152.089844 104.910156 C 152.175781 104.039062 152.300781 103.175781 152.472656 102.320312 C 152.644531 101.464844 152.855469 100.617188 153.109375 99.78125 C 153.363281 98.949219 153.65625 98.125 153.988281 97.320312 C 154.324219 96.511719 154.695312 95.722656 155.109375 94.953125 C 155.519531 94.183594 155.96875 93.4375 156.453125 92.710938 C 156.9375 91.984375 157.457031 91.285156 158.011719 90.609375 C 158.566406 89.933594 159.152344 89.285156 159.769531 88.667969 C 160.386719 88.050781 161.035156 87.464844 161.707031 86.914062 C 162.382812 86.359375 163.082031 85.839844 163.808594 85.355469 C 164.535156 84.867188 165.285156 84.421875 166.054688 84.007812 C 166.824219 83.597656 167.613281 83.222656 168.417969 82.890625 C 169.226562 82.554688 170.046875 82.261719 170.882812 82.007812 C 171.71875 81.753906 172.566406 81.542969 173.421875 81.371094 C 174.277344 81.203125 175.140625 81.074219 176.007812 80.988281 C 176.878906 80.902344 177.75 80.859375 178.621094 80.859375 C 179.496094 80.859375 180.367188 80.902344 181.234375 80.988281 C 182.105469 81.074219 182.96875 81.203125 183.824219 81.371094 C 184.679688 81.542969 185.527344 81.753906 186.363281 82.007812 C 187.199219 82.261719 188.019531 82.554688 188.824219 82.890625 C 189.632812 83.222656 190.421875 83.597656 191.191406 84.007812 C 191.960938 84.421875 192.710938 84.867188 193.4375 85.355469 C 194.160156 85.839844 194.863281 86.359375 195.539062 86.914062 C 196.210938 87.464844 196.859375 88.050781 197.476562 88.667969 C 198.09375 89.285156 198.679688 89.933594 199.234375 90.609375 C 199.789062 91.285156 200.308594 91.984375 200.792969 92.710938 C 201.277344 93.4375 201.726562 94.183594 202.136719 94.953125 C 202.546875 95.722656 202.921875 96.511719 203.253906 97.320312 C 203.589844 98.125 203.882812 98.949219 204.136719 99.78125 C 204.390625 100.617188 204.601562 101.464844 204.773438 102.320312 C 204.941406 103.175781 205.070312 104.039062 205.15625 104.910156 C 205.242188 105.777344 205.285156 106.648438 205.285156 107.523438 Z M 205.285156 107.523438 ", "fill-opacity": "1", "fill-rule": "nonzero" })
  ] });
};
const Card = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn(
      "rounded-xl border border-neutral-200 bg-white text-neutral-950 shadow dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50",
      className
    ),
    ...props
  }
));
Card.displayName = "Card";
const CardHeader = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn("flex flex-col space-y-1.5 p-6", className),
    ...props
  }
));
CardHeader.displayName = "CardHeader";
const CardTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "h3",
  {
    ref,
    className: cn("font-semibold leading-none tracking-tight", className),
    ...props
  }
));
CardTitle.displayName = "CardTitle";
const CardDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "p",
  {
    ref,
    className: cn("text-sm text-neutral-500 dark:text-neutral-400", className),
    ...props
  }
));
CardDescription.displayName = "CardDescription";
const CardContent = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx("div", { ref, className: cn("p-6 pt-0", className), ...props }));
CardContent.displayName = "CardContent";
const CardFooter = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn("flex items-center p-6 pt-0", className),
    ...props
  }
));
CardFooter.displayName = "CardFooter";
const THEMES = { light: "", dark: ".dark" };
const ChartContext = React.createContext(null);
function useChart() {
  const context = React.useContext(ChartContext);
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }
  return context;
}
const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;
  return /* @__PURE__ */ jsx(ChartContext.Provider, { value: { config }, children: /* @__PURE__ */ jsxs(
    "div",
    {
      "data-chart": chartId,
      ref,
      className: cn(
        "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ jsx(ChartStyle, { id: chartId, config }),
        /* @__PURE__ */ jsx(RechartsPrimitive.ResponsiveContainer, { children })
      ]
    }
  ) });
});
ChartContainer.displayName = "Chart";
const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config2]) => config2.theme || config2.color
  );
  if (!colorConfig.length) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    "style",
    {
      dangerouslySetInnerHTML: {
        __html: Object.entries(THEMES).map(
          ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
            var _a;
            const color = ((_a = itemConfig.theme) == null ? void 0 : _a[theme]) || itemConfig.color;
            return color ? `  --color-${key}: ${color};` : null;
          }).join("\n")}
}
`
        ).join("\n")
      }
    }
  );
};
const ChartTooltipContent = React.forwardRef(
  ({
    active,
    payload,
    className,
    indicator = "dot",
    hideLabel = false,
    hideIndicator = false,
    label,
    labelFormatter,
    labelClassName,
    formatter,
    color,
    nameKey,
    labelKey
  }, ref) => {
    const { config } = useChart();
    const tooltipLabel = React.useMemo(() => {
      var _a;
      if (hideLabel || !(payload == null ? void 0 : payload.length)) {
        return null;
      }
      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value = !labelKey && typeof label === "string" ? ((_a = config[label]) == null ? void 0 : _a.label) || label : itemConfig == null ? void 0 : itemConfig.label;
      if (labelFormatter) {
        return /* @__PURE__ */ jsx("div", { className: cn("font-medium", labelClassName), children: labelFormatter(value, payload) });
      }
      if (!value) {
        return null;
      }
      return /* @__PURE__ */ jsx("div", { className: cn("font-medium", labelClassName), children: value });
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey
    ]);
    if (!active || !(payload == null ? void 0 : payload.length)) {
      return null;
    }
    const nestLabel = payload.length === 1 && indicator !== "dot";
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ref,
        className: cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-neutral-200 border-neutral-200/50 bg-white px-2.5 py-1.5 text-xs shadow-xl dark:border-neutral-800 dark:border-neutral-800/50 dark:bg-neutral-950",
          className
        ),
        children: [
          !nestLabel ? tooltipLabel : null,
          /* @__PURE__ */ jsx("div", { className: "grid gap-1.5", children: payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;
            return /* @__PURE__ */ jsx(
              "div",
              {
                className: cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-neutral-500 dark:[&>svg]:text-neutral-400",
                  indicator === "dot" && "items-center"
                ),
                children: formatter && (item == null ? void 0 : item.value) !== void 0 && item.name ? formatter(item.value, item.name, item, index, item.payload) : /* @__PURE__ */ jsxs(Fragment, { children: [
                  (itemConfig == null ? void 0 : itemConfig.icon) ? /* @__PURE__ */ jsx(itemConfig.icon, {}) : !hideIndicator && /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: cn(
                        "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                        {
                          "h-2.5 w-2.5": indicator === "dot",
                          "w-1": indicator === "line",
                          "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                          "my-0.5": nestLabel && indicator === "dashed"
                        }
                      ),
                      style: {
                        "--color-bg": indicatorColor,
                        "--color-border": indicatorColor
                      }
                    }
                  ),
                  /* @__PURE__ */ jsxs(
                    "div",
                    {
                      className: cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      ),
                      children: [
                        /* @__PURE__ */ jsxs("div", { className: "grid gap-1.5", children: [
                          nestLabel ? tooltipLabel : null,
                          /* @__PURE__ */ jsx("span", { className: "text-neutral-500 ", children: (itemConfig == null ? void 0 : itemConfig.label) || item.name })
                        ] }),
                        item.value && /* @__PURE__ */ jsx("span", { className: "font-mono font-medium tabular-nums text-neutral-950 ", children: item.value.toLocaleString() })
                      ]
                    }
                  )
                ] })
              },
              item.dataKey
            );
          }) })
        ]
      }
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";
const ChartLegendContent = React.forwardRef(
  ({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
    const { config } = useChart();
    if (!(payload == null ? void 0 : payload.length)) {
      return null;
    }
    return /* @__PURE__ */ jsx(
      "div",
      {
        ref,
        className: cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        ),
        children: payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);
          return /* @__PURE__ */ jsxs(
            "div",
            {
              className: cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-neutral-500 dark:[&>svg]:text-neutral-400"
              ),
              children: [
                (itemConfig == null ? void 0 : itemConfig.icon) && !hideIcon ? /* @__PURE__ */ jsx(itemConfig.icon, {}) : /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: "h-2 w-2 shrink-0 rounded-[2px]",
                    style: {
                      backgroundColor: item.color
                    }
                  }
                ),
                itemConfig == null ? void 0 : itemConfig.label
              ]
            },
            item.value
          );
        })
      }
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return void 0;
  }
  const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : void 0;
  let configLabelKey = key;
  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
    configLabelKey = payloadPayload[key];
  }
  return configLabelKey in config ? config[configLabelKey] : config[key];
}
const chartConfig = {
  desktop: {
    label: "Revenue",
    color: "#afcc54"
  }
};
const Chart = () => {
  const estimateRevenue2 = useSelector((state) => state.estimateRevenue);
  const chartData = estimateRevenue2.map((data, index) => ({
    month: data.label,
    revenue: data.revenue,
    affiliatePayout: data.referralPayout,
    color: index === estimateRevenue2.length - 1 ? "#afcc54" : "#afcc54"
  }));
  return /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsx(CardContent, { children: /* @__PURE__ */ jsx(ChartContainer, { className: "border-none", config: chartConfig, children: /* @__PURE__ */ jsxs(
    BarChart,
    {
      data: chartData,
      margin: {
        top: 20
      },
      children: [
        /* @__PURE__ */ jsx(CartesianGrid, { vertical: false }),
        /* @__PURE__ */ jsx(
          XAxis,
          {
            dataKey: "month",
            tickLine: false,
            tickMargin: 10,
            axisLine: false,
            tickFormatter: (value) => value.slice(0, 3)
          }
        ),
        /* @__PURE__ */ jsx(
          Tooltip$1,
          {
            content: /* @__PURE__ */ jsx(ChartTooltipContent, {}),
            cursor: false
          }
        ),
        /* @__PURE__ */ jsx(
          Bar,
          {
            activeBar: { fill: "#afcc54" },
            dataKey: "revenue",
            data: chartData,
            name: "Revenue",
            fill: "gray",
            children: /* @__PURE__ */ jsx(
              LabelList,
              {
                position: "top",
                offset: 12,
                fontSize: 12
              }
            )
          }
        )
      ]
    }
  ) }) }) });
};
const BASE_API_URL = "https://sunvoy-affiliate.mooo.com";
const API_KEY = "wahab";
const baseApi = axios.create({
  baseURL: BASE_API_URL
});
baseApi.interceptors.request.use(
  (config) => {
    config.headers["api-key"] = API_KEY;
    return config;
  },
  (error) => Promise.reject(error)
);
baseApi.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error("API Error:", error);
    return Promise.reject(error);
  }
);
const getAffiliate = async () => {
  const res = await baseApi.get("/affiliate");
  return res.data;
};
const saveAffiliate = async (data) => {
  const res = await baseApi.put("/affiliate", data);
  return res.data;
};
const estimateRevenue = async (data) => {
  const res = await baseApi.post("/affiliate/estimate-revenue", data);
  return res.data;
};
const ForcastGraph = () => {
  const [totalReferMonthly, setReferTotalMonthly] = React__default.useState(1);
  const [avgNewProject, setAvgNewProjectMonthly] = React__default.useState(5);
  const [avgExistingProjects, setAverageExistingProjects] = React__default.useState(0);
  const [totalIncome, setTotalIncomePerMonth] = React__default.useState(1);
  const dispatch = useDispatch();
  const { data: affiliate, isPending: isAffiliatePending, isSuccess: isAffilate } = useQuery({
    queryKey: ["affiliate"],
    queryFn: getAffiliate
  });
  const estimateMutate = useMutation({
    mutationKey: ["estimate", affiliate == null ? void 0 : affiliate.id],
    mutationFn: estimateRevenue
  });
  const saveAffiliateMutate = useMutation({
    mutationKey: ["saveAffiliate", affiliate == null ? void 0 : affiliate.id],
    mutationFn: saveAffiliate
  });
  const saveAffiliateResponse = async () => {
    if (affiliate == null ? void 0 : affiliate.id) {
      const data = {
        id: affiliate == null ? void 0 : affiliate.id,
        monthlyRefferals: totalReferMonthly,
        averageNewProjectPerMonth: avgNewProject,
        existingProjectPerMonth: avgExistingProjects
      };
      saveAffiliateMutate.mutate(data, {
        onSuccess: async (data2) => {
          await queryClient.invalidateQueries({ queryKey: ["affiliate"] });
          estimateResponse(data2);
        },
        onError: (error) => {
          console.error(error);
        }
      });
    }
  };
  const estimateResponse = async (affiliate2) => {
    estimateMutate.mutate(
      { affiliate: affiliate2, affiliatePayout: 0.2, monthlyFee: 0.25, pricePerProject: 95 },
      {
        onSuccess: (data) => {
          dispatch(setEstimateRevenue(data));
          setTotalIncomePerMonth(data[11].revenue);
        },
        onError: (error) => {
          console.error(error);
        }
      }
    );
  };
  React__default.useEffect(() => {
    if (isAffilate) {
      setReferTotalMonthly(affiliate.monthlyRefferals);
      setAvgNewProjectMonthly(affiliate.averageNewProjectPerMonth);
      setAverageExistingProjects(affiliate.existingProjectPerMonth);
      estimateResponse(affiliate);
    }
  }, [affiliate]);
  const handleChangeReferTotal = async (value) => {
    setReferTotalMonthly(value[0]);
    await saveAffiliateResponse();
  };
  const handleChangeReferProject = async (value) => {
    setAvgNewProjectMonthly(value[0]);
    await saveAffiliateResponse();
  };
  const handleChangeExistingProjects = async (value) => {
    setAverageExistingProjects(value[0]);
    await saveAffiliateResponse();
  };
  return /* @__PURE__ */ jsx(React__default.Fragment, { children: /* @__PURE__ */ jsxs("div", { className: "p-2 md:p-10  flex flex-col space-y-4 ", children: [
    /* @__PURE__ */ jsxs("h2", { className: "text-center my-4 md:my-0 text-2xl lg:text-3xl font-semibold font-[Arial]", children: [
      " Calculate Your Recurring",
      /* @__PURE__ */ jsx("br", {}),
      "Passive Income"
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row space-y-5  md:space-x-10  ", children: [
      isAffiliatePending ? /* @__PURE__ */ jsx("div", { className: "text-center", children: /* @__PURE__ */ jsx("div", { className: "flex items-center justify-center w-56 h-56 ", children: /* @__PURE__ */ jsxs("div", { role: "status", children: [
        /* @__PURE__ */ jsxs("svg", { "aria-hidden": "true", className: "w-8 h-8 text-gray-200 animate-spin fill-blue-600", viewBox: "0 0 100 101", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
          /* @__PURE__ */ jsx("path", { d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z", fill: "currentColor" }),
          /* @__PURE__ */ jsx("path", { d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z", fill: "currentFill" })
        ] }),
        /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Loading..." })
      ] }) }) }) : /* @__PURE__ */ jsxs("div", { className: "px-10 md:px-0 my-4 md:my-0 md:w-1/4", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-4", children: [
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("p", { children: [
            "Add in your expected referals and see how much you could earn as a",
            /* @__PURE__ */ jsx("span", { className: "mx-1 font-bold", children: "Sunvoy Affiliate" }),
            "in just 1 year"
          ] }) }),
          /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-3", children: [
            /* @__PURE__ */ jsxs("div", { className: " text-gray-500  tracking-wide font-medium    flex justify-between items-center", children: [
              /* @__PURE__ */ jsx("div", { children: "Reffered Increased Per Month" }),
              /* @__PURE__ */ jsx("div", { children: totalReferMonthly })
            ] }),
            /* @__PURE__ */ jsx(Slider, { onValueChange: handleChangeReferTotal, value: [totalReferMonthly], max: 10, min: 1, step: 1 })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-3", children: [
            /* @__PURE__ */ jsxs("div", { className: " text-gray-500  tracking-wide font-medium    flex justify-between items-center", children: [
              /* @__PURE__ */ jsxs("div", { className: "flex space-x-2 items-center", children: [
                /* @__PURE__ */ jsx("div", { children: "Average New Project Per Month" }),
                /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(TooltipProvider, { children: /* @__PURE__ */ jsxs(Tooltip, { children: [
                  /* @__PURE__ */ jsx(TooltipTrigger, { children: /* @__PURE__ */ jsx(ToolTip, { width: 15, height: 15, fill: "#000" }) }),
                  /* @__PURE__ */ jsx(TooltipContent, { children: /* @__PURE__ */ jsx("p", { children: "A number between 5 and 50" }) })
                ] }) }) })
              ] }),
              /* @__PURE__ */ jsx("div", { children: avgNewProject })
            ] }),
            /* @__PURE__ */ jsx(Slider, { onValueChange: handleChangeReferProject, value: [avgNewProject], max: 50, min: 5, step: 1 })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-3", children: [
            /* @__PURE__ */ jsxs("div", { className: " text-gray-500  tracking-wide font-medium    flex justify-between items-center", children: [
              /* @__PURE__ */ jsxs("div", { className: "flex space-x-2 items-center", children: [
                /* @__PURE__ */ jsx("div", { children: "Average existing projects" }),
                /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(TooltipProvider, { children: /* @__PURE__ */ jsxs(Tooltip, { children: [
                  /* @__PURE__ */ jsx(TooltipTrigger, { children: /* @__PURE__ */ jsx(ToolTip, { width: 15, height: 15, fill: "#000" }) }),
                  /* @__PURE__ */ jsx(TooltipContent, { children: /* @__PURE__ */ jsx("p", { children: "A number between 1 and 10,000" }) })
                ] }) }) })
              ] }),
              /* @__PURE__ */ jsx("div", { children: avgExistingProjects })
            ] }),
            /* @__PURE__ */ jsx(Slider, { onValueChange: handleChangeExistingProjects, value: [avgExistingProjects], max: 1e4, min: 1, step: 1 })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex flex-col my-10 space-y-4", children: [
          /* @__PURE__ */ jsx("div", { className: "flex flex-col   md:flex-row  space-x-2 items-center", children: /* @__PURE__ */ jsxs("div", { children: [
            "Your",
            /* @__PURE__ */ jsx("span", { className: "mx-1 font-bold", children: "monthly income" }),
            "after 1 year"
          ] }) }),
          /* @__PURE__ */ jsxs("div", { className: "flex text-3xl md:text-5xl md:-ml-10 text-gray-800 font-bold justify-center", children: [
            "$",
            totalIncome.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, "$&,")
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "md:w-3/4 ", children: isAffiliatePending ? /* @__PURE__ */ jsx("div", { className: "text-center flex justify-center", children: /* @__PURE__ */ jsx("div", { className: "flex items-center justify-center w-56 h-56 ", children: /* @__PURE__ */ jsxs("div", { role: "status", children: [
        /* @__PURE__ */ jsxs("svg", { "aria-hidden": "true", className: "w-8 h-8 text-gray-200 animate-spin fill-blue-600", viewBox: "0 0 100 101", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
          /* @__PURE__ */ jsx("path", { d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z", fill: "currentColor" }),
          /* @__PURE__ */ jsx("path", { d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z", fill: "currentFill" })
        ] }),
        /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Loading..." })
      ] }) }) }) : /* @__PURE__ */ jsx(Chart, {}) })
    ] }),
    /* @__PURE__ */ jsx("div", { className: " text-gray-500 text-center my-8 md:w-8/12 md:mx-auto", children: "Calculations are based on the number of customers you refer each month and their avg, project, volume. Factor in our churn rate and this brings you to your monthly estimated total passive futture income." })
  ] }) });
};
const meta = () => {
  return [
    { title: "Affiliate Tool" },
    { name: "description", content: "" }
  ];
};
function Index() {
  return /* @__PURE__ */ jsx(React__default.Fragment, { children: /* @__PURE__ */ jsx(ForcastGraph, {}) });
}
const route1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Index,
  meta
}, Symbol.toStringTag, { value: "Module" }));
const serverManifest = { "entry": { "module": "/assets/entry.client-Bdcn9_Ho.js", "imports": ["/assets/components-CTuRmono.js"], "css": [] }, "routes": { "root": { "id": "root", "parentId": void 0, "path": "", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/root-CXrZ5u-5.js", "imports": ["/assets/components-CTuRmono.js", "/assets/root-C8uBOu8y.js"], "css": ["/assets/root-CynM07cW.css"] }, "routes/_index": { "id": "routes/_index", "parentId": "root", "path": void 0, "index": true, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/_index-B_DTHjBM.js", "imports": ["/assets/components-CTuRmono.js", "/assets/root-C8uBOu8y.js"], "css": ["/assets/root-CynM07cW.css"] } }, "url": "/assets/manifest-d0a1aab1.js", "version": "d0a1aab1" };
const mode = "production";
const assetsBuildDirectory = "build/client";
const basename = "/";
const future = { "v3_fetcherPersist": true, "v3_relativeSplatPath": true, "v3_throwAbortReason": true, "unstable_singleFetch": false, "unstable_lazyRouteDiscovery": false };
const isSpaMode = false;
const publicPath = "/";
const entry = { module: entryServer };
const routes = {
  "root": {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: route0
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: route1
  }
};
export {
  serverManifest as assets,
  assetsBuildDirectory,
  basename,
  entry,
  future,
  isSpaMode,
  mode,
  publicPath,
  routes
};
